csat <- subset(csat, RESPONSE_DATE >= '01/01/2013')
csat
csat$RESPONSE_DATE
csat <- read.csv("C:/Users/jgreen/Documents/R_Files/CSAT_COGS.csv")
csat$goodScore <- subset(csat, CLAGENT >= 9)
csat$goodScore[csat$CLAGENT >= 9] <- "Y"
csat$goodScore[csat$CLAGENT < 9] <- "N"
csat$RESPONSE_DATE <- as.Date(as.character(csat$RESPONSE_DATE), "%m/%D/%Y")
csat$RESPONSE_DATE
csat <- read.csv("C:/Users/jgreen/Documents/R_Files/CSAT_COGS.csv")
csat$goodScore <- subset(csat, CLAGENT >= 9)
csat$goodScore[csat$CLAGENT >= 9] <- "Y"
csat$goodScore[csat$CLAGENT < 9] <- "N"
csat$RESPONSE_DATE <- as.Date(csat$RESPONSE_DATE, "%m/%D/%Y")
csat$RESPONSE_DATE
csat <- read.csv("C:/Users/jgreen/Documents/R_Files/CSAT_COGS.csv")
csat$goodScore <- subset(csat, CLAGENT >= 9)
csat$goodScore[csat$CLAGENT >= 9] <- "Y"
csat$goodScore[csat$CLAGENT < 9] <- "N"
csat$RESPONSE_DATE
csat <- subset(csat, RESPONSE_DATE >= '01/01/2013')
as.Date(csat$RESPONSE_DATE, format="%m/%D/%Y")
csat$RESPONSE_DATE
as.Date(as.character(csat$RESPONSE_DATE), format="%m/%D/%Y")
csat <- read.csv("C:/Users/jgreen/Documents/R_Files/CSAT_COGS.csv")
csat$goodScore <- subset(csat, CLAGENT >= 9)
csat$goodScore[csat$CLAGENT >= 9] <- "Y"
csat$goodScore[csat$CLAGENT < 9] <- "N"
as.Date(as.character(csat$RESPONSE_DATE), format="%m/%D/%Y")
as.Date(csat$RESPONSE_DATE, format="%m/%D/%Y")
as.Date(csat$RESPONSE_DATE, format="%Y")
as.Date(csat$RESPONSE_DATE, format="%Y-%M-%d")
as.Date(csat$RESPONSE_DATE, format="%Y-%M-%D")
as.Date(csat$RESPONSE_DATE, format="%YYYY-%mm-%dd")
as.Date(csat$RESPONSE_DATE, format="%Y-%m-%d")
as.Date(csat$RESPONSE_DATE, format="%Y %m %d")
as.Date(csat$RESPONSE_DATE, format="%m/%d/%Y")
csat$RESPONSE_DATE <- as.Date(csat$RESPONSE_DATE, format="%m/%d/%Y")
csat <- subset(csat, RESPONSE_DATE >= '01/01/2013')
csat
countsByScore <- ggplot(csat, aes(factor(CLAGENT))) + geom_histogram(fill="gray", color="black") + theme_bw()
countsByCOGS <- ggplot(csat, aes(COGS)) + geom_histogram(binwidth=30, fill="gray", color="black") + theme_bw()
COGSBoxesByScore <- ggplot(csat, aes(factor(CLAGENT),COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(factor(CLAGENT), COGS, data=csat, geom="boxplot") #+ geom_jitter()
ScoreBoxesByCOGS <- ggplot(csat, aes(cut(COGS, seq(0,700,30)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ScoreBoxes <- ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
ScoreCounts <- ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw()
grid.arrange(countsByScore, ScoreCounts, countsByCOGS, COGSBoxesByScore, ScoreBoxes, ScoreBoxesByCOGS, nrow=2)
csat <- subset(csat, RESPONSE_DATE >= '12/01/2013')
countsByScore <- ggplot(csat, aes(factor(CLAGENT))) + geom_histogram(fill="gray", color="black") + theme_bw()
countsByCOGS <- ggplot(csat, aes(COGS)) + geom_histogram(binwidth=30, fill="gray", color="black") + theme_bw()
COGSBoxesByScore <- ggplot(csat, aes(factor(CLAGENT),COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(factor(CLAGENT), COGS, data=csat, geom="boxplot") #+ geom_jitter()
ScoreBoxesByCOGS <- ggplot(csat, aes(cut(COGS, seq(0,700,30)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ScoreBoxes <- ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
ScoreCounts <- ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw()
grid.arrange(countsByScore, ScoreCounts, countsByCOGS, COGSBoxesByScore, ScoreBoxes, ScoreBoxesByCOGS, nrow=2)
#####################################
csat
csat$RESPONSE_DATE
csat <- subset(csat, RESPONSE_DATE >= '2013-10-01')
countsByScore <- ggplot(csat, aes(factor(CLAGENT))) + geom_histogram(fill="gray", color="black") + theme_bw()
countsByCOGS <- ggplot(csat, aes(COGS)) + geom_histogram(binwidth=30, fill="gray", color="black") + theme_bw()
COGSBoxesByScore <- ggplot(csat, aes(factor(CLAGENT),COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(factor(CLAGENT), COGS, data=csat, geom="boxplot") #+ geom_jitter()
ScoreBoxesByCOGS <- ggplot(csat, aes(cut(COGS, seq(0,700,30)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ScoreBoxes <- ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
ScoreCounts <- ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw()
grid.arrange(countsByScore, ScoreCounts, countsByCOGS, COGSBoxesByScore, ScoreBoxes, ScoreBoxesByCOGS, nrow=2)
csat <- subset(csat, RESPONSE_DATE >= '2013-12-01')
countsByScore <- ggplot(csat, aes(factor(CLAGENT))) + geom_histogram(fill="gray", color="black") + theme_bw()
countsByCOGS <- ggplot(csat, aes(COGS)) + geom_histogram(binwidth=30, fill="gray", color="black") + theme_bw()
COGSBoxesByScore <- ggplot(csat, aes(factor(CLAGENT),COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(factor(CLAGENT), COGS, data=csat, geom="boxplot") #+ geom_jitter()
ScoreBoxesByCOGS <- ggplot(csat, aes(cut(COGS, seq(0,700,30)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ScoreBoxes <- ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
ScoreCounts <- ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw()
grid.arrange(countsByScore, ScoreCounts, countsByCOGS, COGSBoxesByScore, ScoreBoxes, ScoreBoxesByCOGS, nrow=2)
#####################################
ScoreBoxesByCOGS <- ggplot(csat, aes(cut(COGS, seq(0,700,100)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ScoreBoxes <- ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
ScoreCounts <- ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw()
grid.arrange(countsByScore, ScoreCounts, countsByCOGS, COGSBoxesByScore, ScoreBoxes, ScoreBoxesByCOGS, nrow=2)
#####################################
ScoreBoxesByCOGS <- ggplot(csat, aes(cut(COGS, seq(0,700,50)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ScoreBoxes <- ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
ScoreCounts <- ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw()
grid.arrange(countsByScore, ScoreCounts, countsByCOGS, COGSBoxesByScore, ScoreBoxes, ScoreBoxesByCOGS, nrow=2)
#####################################
countsByCOGS <- ggplot(csat, aes(COGS)) + geom_histogram(binwidth=50, fill="gray", color="black") + theme_bw()
COGSBoxesByScore <- ggplot(csat, aes(factor(CLAGENT),COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(factor(CLAGENT), COGS, data=csat, geom="boxplot") #+ geom_jitter()
ScoreBoxesByCOGS <- ggplot(csat, aes(cut(COGS, seq(0,700,50)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ScoreBoxes <- ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
ScoreCounts <- ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw()
grid.arrange(countsByScore, ScoreCounts, countsByCOGS, COGSBoxesByScore, ScoreBoxes, ScoreBoxesByCOGS, nrow=2)
#####################################
ggplot(csat, aes(goodScore)) + geom_histogram(aes(y = ..density..), fill="gray", color="black") + theme_bw()
ggplot(csat, aes(goodScore)) + geom_density()
ggplot(csat, aes(goodScore)) + geom_histogram(aes(y = ..density..), fill="gray", color="black") + theme_bw() + geom_density()
ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw() + geom_density()
countsByScore <- ggplot(csat, aes(factor(CLAGENT))) + geom_histogram(fill="gray", color="black") + theme_bw()
countsByCOGS <- ggplot(csat, aes(COGS)) + geom_histogram(binwidth=50, fill="gray", color="black") + theme_bw()
COGSBoxesByScore <- ggplot(csat, aes(factor(CLAGENT),COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(factor(CLAGENT), COGS, data=csat, geom="boxplot") #+ geom_jitter()
ScoreBoxesByCOGS <- ggplot(csat, aes(cut(COGS, seq(0,700,50)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ScoreBoxes <- ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
ScoreCounts <- ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw()
grid.arrange(countsByScore, ScoreCounts, countsByCOGS, COGSBoxesByScore, ScoreBoxes, ScoreBoxesByCOGS, nrow=2)
#####################################
#install.packages("ggplot2")  # Install GGPlot2 *Only needed if not already installed.
library(ggplot2)              # ggplot2 for creating the charts
library(scales)               # scales for the dollar formatting of the axis.
library(gridExtra)
#Load the csv file containing the values:
csat <- read.csv("C:/Users/jgreen/Documents/R_Files/CSAT_COGS.csv")
csat$goodScore <- subset(csat, CLAGENT >= 9)
csat$goodScore[csat$CLAGENT >= 9] <- "Y"
csat$goodScore[csat$CLAGENT < 9] <- "N"
csat$RESPONSE_DATE <- as.Date(csat$RESPONSE_DATE, format="%m/%d/%Y")
csat <- subset(csat, RESPONSE_DATE >= '2013-10-01')
#summary(csat)
#names(csat)
#with(csat, plot(CLAGENT, COGS))
#ggplot(csat, aes(factor(CLAGENT),COGS)) + geom_jitter()
#hist(csat$CLAGENT)
countsByScore <- ggplot(csat, aes(factor(CLAGENT))) + geom_histogram(fill="gray", color="black") + theme_bw()
countsByCOGS <- ggplot(csat, aes(COGS)) + geom_histogram(binwidth=50, fill="gray", color="black") + theme_bw()
COGSBoxesByScore <- ggplot(csat, aes(factor(CLAGENT),COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(factor(CLAGENT), COGS, data=csat, geom="boxplot") #+ geom_jitter()
ScoreBoxesByCOGS <- ggplot(csat, aes(cut(COGS, seq(0,700,50)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ScoreBoxes <- ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
ScoreCounts <- ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw()
grid.arrange(countsByScore, ScoreCounts, countsByCOGS, COGSBoxesByScore, ScoreBoxes, ScoreBoxesByCOGS, nrow=2)
#####################################
countsByScore <- ggplot(csat, aes(factor(CLAGENT))) + geom_histogram(fill="gray", color="black") + theme_bw()
countsByCOGS <- ggplot(csat, aes(COGS)) + geom_histogram(binwidth=50, fill="gray", color="black") + theme_bw()
COGSBoxesByScore <- ggplot(csat, aes(factor(CLAGENT),COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(factor(CLAGENT), COGS, data=csat, geom="boxplot") #+ geom_jitter()
ScoreBoxesByCOGS <- ggplot(csat, aes(cut(COGS, seq(0,600,200)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ScoreBoxes <- ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
ScoreCounts <- ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw()
grid.arrange(countsByScore, ScoreCounts, countsByCOGS, COGSBoxesByScore, ScoreBoxes, ScoreBoxesByCOGS, nrow=2)
#####################################
ggplot(csat, aes(cut(COGS, seq(0,600,100)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='text',size = 3, color='red') + theme_bw()
ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
mean(csat$COGS ~ csat$CLAGENT)
mean(csat$CLAGENT ~ csat$COGS)
mean(csat$CLAGENT, csat$COGS)
tapply(csat$CLAGENT, csat$COGS, FUN=mean)
tapply(csat$COGS, csat$CLAGENT, FUN=mean)
aggregate(COGS~CLAGENT, data=csat, FUN="mean")
aggregate(COGS~goodScore, data=csat, FUN="mean")
tapply(csat$COGS, csat$goodScore, FUN=mean)
summaryBy(COGS~goodScore, data=csat, FUN="mean")
library(doBy)
install.packages("doBy")
library(doBy)                 # doBy for summarization
summaryBy(COGS~goodScore, data=csat, FUN="mean")
summaryBy(COGS~goodScore, data=csat, FUN="mean")
c(count=length(x), mean=mean(x),median=median(x)))
summaryBy(COGS~goodScore, data=csat, FUN="mean")
c(count=length(x), mean=mean(x),median=median(x))
summaryBy(COGS~goodScore, data=csat, FUN=function(x)
c(count=length(x), mean=mean(x),median=median(x)))
summaryBy(COGS~goodScore, data=csat, na.rm, FUN=function(x)
c(count=length(x), mean=mean(x),median=median(x)))
library(plyr)
summaryBy(COGS~goodScore, data=csat, FUN=function(x)
c(count=length(x), mean=mean(x, na.rm=TRUE),median=median(x)))
summaryBy(COGS~goodScore, data=csat, FUN=function(x)
c(count=length(x), mean=mean(x, na.rm=TRUE),median=median(x, na.rm=TRUE)))
tapply(csat$COGS, csat$goodScore, FUN=mean, na.rm=TRUE)
aggregate(COGS~goodScore, data=csat, FUN="mean", na.rm=TRUE)
ddply(csat, "goodScore", summarize, mean = mean(COGS, na.rm=TRUE))
names(csat)
ddply(csat, c("goodScore","PROP.STATE"), summarize, mean = mean(COGS, na.rm=TRUE))
ddply(csat, c("goodScore","PROP.STATE"), summarize,
mean = mean(COGS, na.rm=TRUE),
median = median(COGS, na.rm=TRUE))
ddply(csat, c("goodScore","PROP.STATE"), summarize,
Count = length(PROP.STATE),
mean = mean(COGS, na.rm=TRUE),
median = median(COGS, na.rm=TRUE))
DF <- ddply(csat, c("goodScore","PROP.STATE"), summarize,
Count = length(PROP.STATE),
mean = mean(COGS, na.rm=TRUE),
median = median(COGS, na.rm=TRUE))
edit(DF)
#install.packages("ggplot2")  # Install GGPlot2 *Only needed if not already installed.
#install.packages("doBy")
library(ggplot2)              # ggplot2 for creating the charts
library(scales)               # scales for the dollar formatting of the axis.
library(gridExtra)
library(doBy)                 # doBy for summarization
library(plyr)
#Load the csv file containing the values:
csat <- read.csv("C:/Users/jgreen/Documents/R_Files/CSAT_COGS.csv")
csat$goodScore <- subset(csat, CLAGENT >= 9)
csat$goodScore[csat$CLAGENT >= 9] <- "Y"
csat$goodScore[csat$CLAGENT < 9] <- "N"
csat$RESPONSE_DATE <- as.Date(csat$RESPONSE_DATE, format="%m/%d/%Y")
csat <- subset(csat, RESPONSE_DATE >= '2013-10-01')
#summary(csat)
#names(csat)
#with(csat, plot(CLAGENT, COGS))
#ggplot(csat, aes(factor(CLAGENT),COGS)) + geom_jitter()
#hist(csat$CLAGENT)
countsByScore <- ggplot(csat, aes(factor(CLAGENT))) + geom_histogram(fill="gray", color="black") + theme_bw()
countsByCOGS <- ggplot(csat, aes(COGS)) + geom_histogram(binwidth=50, fill="gray", color="black") + theme_bw()
COGSBoxesByScore <- ggplot(csat, aes(factor(CLAGENT),COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(factor(CLAGENT), COGS, data=csat, geom="boxplot") #+ geom_jitter()
ScoreBoxesByCOGS <- ggplot(csat, aes(cut(COGS, seq(0,600,100)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ScoreBoxes <- ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
ScoreCounts <- ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw()
grid.arrange(countsByScore, ScoreCounts, countsByCOGS, COGSBoxesByScore, ScoreBoxes, ScoreBoxesByCOGS, nrow=2)
max(csat$RESPONSE_DATE)
ddply(csat, "goodScore", summarize, mean = mean(COGS, na.rm=TRUE))
# Using doBy
summaryBy(COGS~goodScore, data=csat, FUN=function(x)
c(count=length(x), mean=mean(x, na.rm=TRUE),median=median(x, na.rm=TRUE)))
install.packages("knitr")
install.packages("plyr")
install.packages("quantmod")
#################################
# Vendor Lat/Long
# Jason Green
# 8/7/2013
#################################
## Load Necessary Packages
library(RODBC)
library(TTR)
library(scales)
library(gridExtra)
library(ggplot2)
library(plyr)
library(chron)
#Define Queries ###############################################
vendorlocations <- "
select ACTIVE_FLG, PROD_CLASS_CDE, X_POSITION as long, Y_POSITION as lat
from vs_vendor
where X_POSITION is not null
and Y_POSITION is not null
and PROD_CLASS_CDE is not null
"
##### End Define Queries ######################################
# Connect to database
vision <- odbcDriverConnect('driver={SQL Server};server=pitdw-misetl-01\\misetl_proc;database=Vision6_STDBY_SL;trusted_connection=true')
# Run Query #### Change depending on data required
vendors <- sqlQuery(vision,vendorlocations )   #   dataconnection,query
# Close Data Connection
odbcCloseAll()
plot(vendors$lat,vendors$long)
plot(vendors$long,vendors$lat)
contiguous <- subset(vendors, lat > 20 & lat < 50 & long > -130 & long < -50)
plot(contiguous$long,contiguous$lat)
plot(contiguous$long,contiguous$lat, fill=contiguous$PROD_CLASS_CDE)
plot(contiguous$long,contiguous$lat, col=contiguous$PROD_CLASS_CDE)
plot(contiguous$long,contiguous$lat, col=contiguous$ACTIVE_FLG)
activecontig <- subset(contiguous, ACTIVE_FLG == "Y")
plot(activecontig$long,contiguous$lat, col=contiguous$PROD_CLASS_CDE)
activecontig <- subset(contiguous, ACTIVE_FLG == "Y")
plot(activecontig$long,contiguous$lat, col=contiguous$PROD_CLASS_CDE)
plot(activecontig$long,activecontig$lat, col=activecontig$PROD_CLASS_CDE)
plot(vendors$long,vendors$lat)
plot(contiguous$long,contiguous$lat, col=contiguous$ACTIVE_FLG)
appraisers <- subset(activecontig, PROD_CLASS_CDE == "A")
plot(appraisers$long,appraisers$lat)
appraisers <- subset(activecontig, PROD_CLASS_CDE == "A")
closers <- subset(activecontig, PROD_CLASS_CDE == "C")
abstractors <- subset(activecontig, PROD_CLASS_CDE == "T")
par(3,)
plot(appraisers$long,appraisers$lat)
plot(closers$long,closers$lat)
plot(abstractors$long,abstractors$lat)
par(3,1)
plot(appraisers$long,appraisers$lat)
plot(closers$long,closers$lat)
plot(abstractors$long,abstractors$lat)
par(1,3)
plot(appraisers$long,appraisers$lat)
plot(closers$long,closers$lat)
plot(abstractors$long,abstractors$lat)
par(mfrow=c(3,1))
plot(appraisers$long,appraisers$lat)
plot(closers$long,closers$lat)
plot(abstractors$long,abstractors$lat)
par(mfrow=c(2,2))
plot(activecontig$long,activecontig$lat, col=activecontig$PROD_CLASS_CDE)
plot(appraisers$long,appraisers$lat)
plot(closers$long,closers$lat)
plot(abstractors$long,abstractors$lat)
pavend <- subset(vendors, state_cde == "PA")
library(ggplot2)
#Define Queries ###############################################
vendorlocations <- "
select ACTIVE_FLG, PROD_CLASS_CDE, X_POSITION as long, Y_POSITION as lat, state_cde
from vs_vendor
where X_POSITION is not null
and Y_POSITION is not null
and PROD_CLASS_CDE is not null
"
##### End Define Queries ######################################
# Connect to database
vision <- odbcDriverConnect('driver={SQL Server};server=pitdw-misetl-01\\misetl_proc;database=Vision6_STDBY_SL;trusted_connection=true')
# Run Query #### Change depending on data required
vendors <- sqlQuery(vision,vendorlocations )   #   dataconnection,query
# Close Data Connection
odbcCloseAll()
contiguous <- subset(vendors, lat > 20 & lat < 50 & long > -130 & long < -50)
activecontig <- subset(contiguous, ACTIVE_FLG == "Y")
appraisers <- subset(activecontig, PROD_CLASS_CDE == "A")
closers <- subset(activecontig, PROD_CLASS_CDE == "C")
abstractors <- subset(activecontig, PROD_CLASS_CDE == "T")
pavend <- subset(vendors, state_cde == "PA")
plot(pavend$long, pavend$lat)
pavend <- subset(vendors, state_cde == "PA" & long > -85 & long < -60)
plot(pavend$long, pavend$lat)
pavend <- subset(vendors, state_cde == "PA" & long > -81 & long < -60 & lat > 38)
plot(pavend$long, pavend$lat)
par(mfrow=c(2,2))
plot(activecontig$long,activecontig$lat, col=activecontig$PROD_CLASS_CDE)
plot(appraisers$long,appraisers$lat)
plot(closers$long,closers$lat)
plot(abstractors$long,abstractors$lat)
qplot(pavend$long, pavend$lat)
qplot(vendors$long,vendors$lat)
qplot(contiguous$long,contiguous$lat, col=contiguous$ACTIVE_FLG)
?qplot
# Load Packages
library(plyr)
library(ggplot2)
library(gridExtra)
# Set Working Directory
setwd("~/GitHub/kaggle-allstate-predictor")
# Import Data
sampleSubmission <- read.csv("~/GitHub/kaggle-allstate-predictor/sampleSubmission.csv")
test <- read.csv("~/GitHub/giantfiles/kaggle-allstate-predictor/test_v2.csv")
#test <- read.csv("~/GitHub/kaggle-allstate-predictor/test.csv")
train <- read.csv("~/GitHub/giantfiles/kaggle-allstate-predictor/train.csv")
train.quotes <- subset(train, train$record_type == 0)
train.selection <- subset(train, train$record_type == 1)
boxplot(train.selection$A ~ train.selection$car_age)
qplot(car_value, data=train.selection, geom="histogram")
qplot(risk_factor, data=train.selection, geom="histogram")
qplot(married_couple, data=train.selection, geom="histogram")
training <- subset(train.selection, married_couple == 1)
Aplot <- qplot(A,data=training, binwidth = 1, geom="histogram", na.rm=T)
Bplot <- qplot(B,data=training, binwidth = 1, geom="histogram", na.rm=T)
Cplot <- qplot(C,data=training, binwidth = 1, geom="histogram", na.rm=T)
Dplot <- qplot(D,data=training, binwidth = 1, geom="histogram", na.rm=T)
Eplot <- qplot(E,data=training, binwidth = 1, geom="histogram", na.rm=T)
Fplot <- qplot(F,data=training, binwidth = 1, geom="histogram", na.rm=T)
Gplot <- qplot(G,data=training, binwidth = 1, geom="histogram", na.rm=T)
grid.arrange(Aplot, Bplot,Cplot,Dplot,Eplot,Fplot,Gplot,ncol=4)
training <- subset(train.selection, married_couple == 0)
Aplot <- qplot(A,data=training, binwidth = 1, geom="histogram", na.rm=T)
Bplot <- qplot(B,data=training, binwidth = 1, geom="histogram", na.rm=T)
Cplot <- qplot(C,data=training, binwidth = 1, geom="histogram", na.rm=T)
Dplot <- qplot(D,data=training, binwidth = 1, geom="histogram", na.rm=T)
Eplot <- qplot(E,data=training, binwidth = 1, geom="histogram", na.rm=T)
Fplot <- qplot(F,data=training, binwidth = 1, geom="histogram", na.rm=T)
Gplot <- qplot(G,data=training, binwidth = 1, geom="histogram", na.rm=T)
grid.arrange(Aplot, Bplot,Cplot,Dplot,Eplot,Fplot,Gplot,ncol=4)
qplot(c_previous, data=train.selection, geom="histogram")
names(train.selection)
qplot(C_previous, data=train.selection, geom="histogram")
training <- subset(train.selection, C_previous == 3)
Aplot <- qplot(A,data=training, binwidth = 1, geom="histogram", na.rm=T)
Bplot <- qplot(B,data=training, binwidth = 1, geom="histogram", na.rm=T)
Cplot <- qplot(C,data=training, binwidth = 1, geom="histogram", na.rm=T)
Dplot <- qplot(D,data=training, binwidth = 1, geom="histogram", na.rm=T)
Eplot <- qplot(E,data=training, binwidth = 1, geom="histogram", na.rm=T)
Fplot <- qplot(F,data=training, binwidth = 1, geom="histogram", na.rm=T)
Gplot <- qplot(G,data=training, binwidth = 1, geom="histogram", na.rm=T)
grid.arrange(Aplot, Bplot,Cplot,Dplot,Eplot,Fplot,Gplot,ncol=4)
training <- subset(train.selection, C_previous == 1)
Aplot <- qplot(A,data=training, binwidth = 1, geom="histogram", na.rm=T)
Bplot <- qplot(B,data=training, binwidth = 1, geom="histogram", na.rm=T)
Cplot <- qplot(C,data=training, binwidth = 1, geom="histogram", na.rm=T)
Dplot <- qplot(D,data=training, binwidth = 1, geom="histogram", na.rm=T)
Eplot <- qplot(E,data=training, binwidth = 1, geom="histogram", na.rm=T)
Fplot <- qplot(F,data=training, binwidth = 1, geom="histogram", na.rm=T)
Gplot <- qplot(G,data=training, binwidth = 1, geom="histogram", na.rm=T)
grid.arrange(Aplot, Bplot,Cplot,Dplot,Eplot,Fplot,Gplot,ncol=4)
training <- subset(train.selection, C_previous == 2)
Aplot <- qplot(A,data=training, binwidth = 1, geom="histogram", na.rm=T)
Bplot <- qplot(B,data=training, binwidth = 1, geom="histogram", na.rm=T)
Cplot <- qplot(C,data=training, binwidth = 1, geom="histogram", na.rm=T)
Dplot <- qplot(D,data=training, binwidth = 1, geom="histogram", na.rm=T)
Eplot <- qplot(E,data=training, binwidth = 1, geom="histogram", na.rm=T)
Fplot <- qplot(F,data=training, binwidth = 1, geom="histogram", na.rm=T)
Gplot <- qplot(G,data=training, binwidth = 1, geom="histogram", na.rm=T)
grid.arrange(Aplot, Bplot,Cplot,Dplot,Eplot,Fplot,Gplot,ncol=4)
training <- subset(train.selection, C_previous == 4)
Aplot <- qplot(A,data=training, binwidth = 1, geom="histogram", na.rm=T)
Bplot <- qplot(B,data=training, binwidth = 1, geom="histogram", na.rm=T)
Cplot <- qplot(C,data=training, binwidth = 1, geom="histogram", na.rm=T)
Dplot <- qplot(D,data=training, binwidth = 1, geom="histogram", na.rm=T)
Eplot <- qplot(E,data=training, binwidth = 1, geom="histogram", na.rm=T)
Fplot <- qplot(F,data=training, binwidth = 1, geom="histogram", na.rm=T)
Gplot <- qplot(G,data=training, binwidth = 1, geom="histogram", na.rm=T)
grid.arrange(Aplot, Bplot,Cplot,Dplot,Eplot,Fplot,Gplot,ncol=4)
######################################################
#  Kaggle Allstate Purchase Prediction Challenge
#  Jason Green
#  February, 24th 2014
#  https://github.com/Convalytics/kaggle-allstate-predictor
#  Last Updated: 2/24/2014
######################################################
# Load Packages
library(plyr)
# Set Working Directory
setwd("~/GitHub/kaggle-allstate-predictor")
# Import Data
sampleSubmission <- read.csv("~/GitHub/kaggle-allstate-predictor/sampleSubmission.csv")
test <- read.csv("~/GitHub/giantfiles/kaggle-allstate-predictor/test_v2.csv")
#test <- read.csv("~/GitHub/kaggle-allstate-predictor/test.csv")
#train <- read.csv("~/GitHub/giantfiles/kaggle-allstate-predictor/train.csv")
# head(sampleSubmission, n=5)
# head(test, n=5)
# head(train, n=5)
#### Last Quote submission
#Gets the last quoted plan
sub <- test[ !duplicated( test$customer_ID, fromLast=TRUE ) , ]
#### RULES ###########
#Test
#subset(sub,state == "OH" & G < 2 )
# The F option in NY is always 0
sub$F[sub$state == "NY"] <- 0
# The G option in FL is never 1 or 2, and is 3 80% of the time.
sub$G[sub$state == "FL" & sub$G < 3] <- 3
# OH - G is never 1. Is 3 80% of the time.
# None found in the test set. :(
sub$G[sub$state == "OH" & sub$G == 1] <- 3
# GA - C is 2, never 1. ... D is 2, never 1.
sub$C[sub$state == "GA" & sub$C < 2] <- 2
sub$D[sub$state == "GA" & sub$D < 2] <- 2
# Car age > 15.
sub$A[sub$car_age > 15 & sub$A != 0 & sub$A != 1] <- 0
sub$E[sub$car_age > 15 & sub$E != 0] <- 0
sub$F[sub$car_age > 15 & sub$F == 3] <- 0
# C_previous
sub$C[sub$C_previous = 1 & sub$C == 4] <- 1
sub$C[sub$C_previous = 2 & sub$C == 4] <- 2
sub$C[sub$C_previous = 3 & sub$C == 4] <- 3
sub$D[sub$C_previous = 3 & sub$D == 1] <- 3
sub$D[sub$C_previous = 4 & sub$D == 1] <- 3
##################################################################################
# Build submission file.
sub$plan <- paste0( sub[,18],sub[,19],sub[,20],sub[,21],sub[,22],sub[,23],sub[,24] )
lastQuote <- sub[,c]
write.csv(sub[,c(1,ncol(sub))],paste0('convalytics_allstate_xx.csv'),quote=FALSE , row.names = FALSE )
#############################################
# C_previous
sub$C[sub$C_previous == 1 & sub$C == 4] <- 1
sub$C[sub$C_previous == 2 & sub$C == 4] <- 2
sub$C[sub$C_previous == 3 & sub$C == 4] <- 3
sub$D[sub$C_previous == 3 & sub$D == 1] <- 3
sub$D[sub$C_previous == 4 & sub$D == 1] <- 3
##################################################################################
# Build submission file.
sub$plan <- paste0( sub[,18],sub[,19],sub[,20],sub[,21],sub[,22],sub[,23],sub[,24] )
lastQuote <- sub[,c]
write.csv(sub[,c(1,ncol(sub))],paste0('convalytics_allstate_xx.csv'),quote=FALSE , row.names = FALSE )
