#ggplot(csat, aes(factor(CLAGENT),COGS)) + geom_jitter()
#hist(csat$CLAGENT)
countsByScore <- ggplot(csat, aes(factor(CLAGENT))) + geom_histogram(fill="gray", color="black") + theme_bw()
countsByCOGS <- ggplot(csat, aes(COGS)) + geom_histogram(binwidth=50, fill="gray", color="black") + theme_bw()
COGSBoxesByScore <- ggplot(csat, aes(factor(CLAGENT),COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(factor(CLAGENT), COGS, data=csat, geom="boxplot") #+ geom_jitter()
ScoreBoxesByCOGS <- ggplot(csat, aes(cut(COGS, seq(0,700,50)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ScoreBoxes <- ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
ScoreCounts <- ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw()
grid.arrange(countsByScore, ScoreCounts, countsByCOGS, COGSBoxesByScore, ScoreBoxes, ScoreBoxesByCOGS, nrow=2)
#####################################
countsByScore <- ggplot(csat, aes(factor(CLAGENT))) + geom_histogram(fill="gray", color="black") + theme_bw()
countsByCOGS <- ggplot(csat, aes(COGS)) + geom_histogram(binwidth=50, fill="gray", color="black") + theme_bw()
COGSBoxesByScore <- ggplot(csat, aes(factor(CLAGENT),COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(factor(CLAGENT), COGS, data=csat, geom="boxplot") #+ geom_jitter()
ScoreBoxesByCOGS <- ggplot(csat, aes(cut(COGS, seq(0,600,200)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ScoreBoxes <- ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
ScoreCounts <- ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw()
grid.arrange(countsByScore, ScoreCounts, countsByCOGS, COGSBoxesByScore, ScoreBoxes, ScoreBoxesByCOGS, nrow=2)
#####################################
ggplot(csat, aes(cut(COGS, seq(0,600,100)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='text',size = 3, color='red') + theme_bw()
ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
mean(csat$COGS ~ csat$CLAGENT)
mean(csat$CLAGENT ~ csat$COGS)
mean(csat$CLAGENT, csat$COGS)
tapply(csat$CLAGENT, csat$COGS, FUN=mean)
tapply(csat$COGS, csat$CLAGENT, FUN=mean)
aggregate(COGS~CLAGENT, data=csat, FUN="mean")
aggregate(COGS~goodScore, data=csat, FUN="mean")
tapply(csat$COGS, csat$goodScore, FUN=mean)
summaryBy(COGS~goodScore, data=csat, FUN="mean")
library(doBy)
install.packages("doBy")
library(doBy)                 # doBy for summarization
summaryBy(COGS~goodScore, data=csat, FUN="mean")
summaryBy(COGS~goodScore, data=csat, FUN="mean")
c(count=length(x), mean=mean(x),median=median(x)))
summaryBy(COGS~goodScore, data=csat, FUN="mean")
c(count=length(x), mean=mean(x),median=median(x))
summaryBy(COGS~goodScore, data=csat, FUN=function(x)
c(count=length(x), mean=mean(x),median=median(x)))
summaryBy(COGS~goodScore, data=csat, na.rm, FUN=function(x)
c(count=length(x), mean=mean(x),median=median(x)))
library(plyr)
summaryBy(COGS~goodScore, data=csat, FUN=function(x)
c(count=length(x), mean=mean(x, na.rm=TRUE),median=median(x)))
summaryBy(COGS~goodScore, data=csat, FUN=function(x)
c(count=length(x), mean=mean(x, na.rm=TRUE),median=median(x, na.rm=TRUE)))
tapply(csat$COGS, csat$goodScore, FUN=mean, na.rm=TRUE)
aggregate(COGS~goodScore, data=csat, FUN="mean", na.rm=TRUE)
ddply(csat, "goodScore", summarize, mean = mean(COGS, na.rm=TRUE))
names(csat)
ddply(csat, c("goodScore","PROP.STATE"), summarize, mean = mean(COGS, na.rm=TRUE))
ddply(csat, c("goodScore","PROP.STATE"), summarize,
mean = mean(COGS, na.rm=TRUE),
median = median(COGS, na.rm=TRUE))
ddply(csat, c("goodScore","PROP.STATE"), summarize,
Count = length(PROP.STATE),
mean = mean(COGS, na.rm=TRUE),
median = median(COGS, na.rm=TRUE))
DF <- ddply(csat, c("goodScore","PROP.STATE"), summarize,
Count = length(PROP.STATE),
mean = mean(COGS, na.rm=TRUE),
median = median(COGS, na.rm=TRUE))
edit(DF)
#install.packages("ggplot2")  # Install GGPlot2 *Only needed if not already installed.
#install.packages("doBy")
library(ggplot2)              # ggplot2 for creating the charts
library(scales)               # scales for the dollar formatting of the axis.
library(gridExtra)
library(doBy)                 # doBy for summarization
library(plyr)
#Load the csv file containing the values:
csat <- read.csv("C:/Users/jgreen/Documents/R_Files/CSAT_COGS.csv")
csat$goodScore <- subset(csat, CLAGENT >= 9)
csat$goodScore[csat$CLAGENT >= 9] <- "Y"
csat$goodScore[csat$CLAGENT < 9] <- "N"
csat$RESPONSE_DATE <- as.Date(csat$RESPONSE_DATE, format="%m/%d/%Y")
csat <- subset(csat, RESPONSE_DATE >= '2013-10-01')
#summary(csat)
#names(csat)
#with(csat, plot(CLAGENT, COGS))
#ggplot(csat, aes(factor(CLAGENT),COGS)) + geom_jitter()
#hist(csat$CLAGENT)
countsByScore <- ggplot(csat, aes(factor(CLAGENT))) + geom_histogram(fill="gray", color="black") + theme_bw()
countsByCOGS <- ggplot(csat, aes(COGS)) + geom_histogram(binwidth=50, fill="gray", color="black") + theme_bw()
COGSBoxesByScore <- ggplot(csat, aes(factor(CLAGENT),COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(factor(CLAGENT), COGS, data=csat, geom="boxplot") #+ geom_jitter()
ScoreBoxesByCOGS <- ggplot(csat, aes(cut(COGS, seq(0,600,100)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ScoreBoxes <- ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
ScoreCounts <- ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw()
grid.arrange(countsByScore, ScoreCounts, countsByCOGS, COGSBoxesByScore, ScoreBoxes, ScoreBoxesByCOGS, nrow=2)
max(csat$RESPONSE_DATE)
ddply(csat, "goodScore", summarize, mean = mean(COGS, na.rm=TRUE))
# Using doBy
summaryBy(COGS~goodScore, data=csat, FUN=function(x)
c(count=length(x), mean=mean(x, na.rm=TRUE),median=median(x, na.rm=TRUE)))
install.packages("knitr")
install.packages("plyr")
install.packages("quantmod")
######################################################
#  Kaggle Allstate Purchase Prediction Challenge
#  Jason Green
#  February, 24th 2014
#  https://github.com/Convalytics/kaggle-allstate-predictor
#  Last Updated: 2/24/2014
######################################################
install.packages("plyr")
# Load Packages
library(plyr)
# Set Working Directory
setwd("~/GitHub/kaggle-allstate-predictor")
# Import Data
sampleSubmission <- read.csv("~/GitHub/kaggle-allstate-predictor/sampleSubmission.csv")
test <- read.csv("~/GitHub/kaggle-allstate-predictor/test.csv")
train <- read.csv("~/GitHub/kaggle-allstate-predictor/train.csv")
head(sampleSubmission, n=5)
head(test, n=5)
head(train, n=5)
#### Last Quote submission
sub <- test[ !duplicated( test$customer_ID, fromLast=TRUE ) , ]
sub$plan <- paste0( sub[,18],sub[,19],sub[,20],sub[,21],sub[,22],sub[,23],sub[,24] )
write.csv(sub[,c(1,ncol(sub)],paste0('sub.persistent.csv'),quote=FALSE , row.names = FALSE )
######################################################
#  Kaggle Allstate Purchase Prediction Challenge
#  Jason Green
#  February, 24th 2014
#  https://github.com/Convalytics/kaggle-allstate-predictor
#  Last Updated: 2/24/2014
######################################################
# Load Packages
library(plyr)
# Set Working Directory
setwd("~/GitHub/kaggle-allstate-predictor")
# Import Data
sampleSubmission <- read.csv("~/GitHub/kaggle-allstate-predictor/sampleSubmission.csv")
test <- read.csv("~/GitHub/kaggle-allstate-predictor/test.csv")
train <- read.csv("~/GitHub/kaggle-allstate-predictor/train.csv")
head(sampleSubmission, n=5)
head(test, n=5)
head(train, n=5)
#### Last Quote submission
sub <- test[ !duplicated( test$customer_ID, fromLast=TRUE ) , ]
sub$plan <- paste0( sub[,18],sub[,19],sub[,20],sub[,21],sub[,22],sub[,23],sub[,24] )
write.csv(sub[,c(1,ncol(sub)],paste0('sub.persistent.csv'),quote=FALSE , row.names = FALSE )
head(sub)
write.csv(sub[,c(1,ncol(sub))],paste0('sub.persistent.csv'),quote=FALSE , row.names = FALSE )
head(train, n=5)
train.quotes <- sub(train, train$record_type == 0)
?sub
train.quotes <- subset(train, train$record_type == 0)
train.selection <- subset(train, train$record_type == 1)
boxplot(train.selection$A)
boxplot(train.selection$G)
Aplot <- boxplot(train.selection$A)
Bplot <- boxplot(train.selection$B)
Cplot <- boxplot(train.selection$C)
Dplot <- boxplot(train.selection$D)
Eplot <- boxplot(train.selection$E)
Fplot <- boxplot(train.selection$F)
Gplot <- boxplot(train.selection$G)
par(mfrow=c(1,7))
Aplot <- boxplot(train.selection$A)
Bplot <- boxplot(train.selection$B)
Cplot <- boxplot(train.selection$C)
Dplot <- boxplot(train.selection$D)
Eplot <- boxplot(train.selection$E)
Fplot <- boxplot(train.selection$F)
Gplot <- boxplot(train.selection$G)
par(mfrow=c(1,))
Aplot <- boxplot(train.selection$A)
Bplot <- boxplot(train.selection$B)
Cplot <- boxplot(train.selection$C)
Dplot <- boxplot(train.selection$D)
Eplot <- boxplot(train.selection$E)
Fplot <- boxplot(train.selection$F)
Gplot <- boxplot(train.selection$G)
Gplot <- boxplot(train.selection$G)
boxplot(train.selection$G)
######################################################
#  Kaggle Allstate Purchase Prediction Challenge
#  Jason Green
#  February, 24th 2014
#  https://github.com/Convalytics/kaggle-allstate-predictor
#  Last Updated: 2/24/2014
######################################################
# Load Packages
library(plyr)
# Set Working Directory
setwd("~/GitHub/kaggle-allstate-predictor")
# Import Data
sampleSubmission <- read.csv("~/GitHub/kaggle-allstate-predictor/sampleSubmission.csv")
test <- read.csv("~/GitHub/kaggle-allstate-predictor/test.csv")
train <- read.csv("~/GitHub/kaggle-allstate-predictor/train.csv")
head(sampleSubmission, n=5)
head(test, n=5)
head(train, n=5)
train.quotes <- subset(train, train$record_type == 0)
train.selection <- subset(train, train$record_type == 1)
boxplot(train.selection$G)
boxplot(train.selection$A)
head(train.selection)
boxplot(train.selection$A, na.rm=T)
par(mfrow=c(1,1))
boxplot(train.selection$A, na.rm=T)
library(ggplot2)
qplot(A,data=train.selection, geom="boxplot")
qplot(A,A,data=train.selection, geom="boxplot")
qplot(B,B,data=train.selection, geom="boxplot")
qplot(B,B,data=train.selection, geom="violin")
qplot(B,B,data=train.selection, geom="violin", na.rm=T)
Aplot <- qplot(A,A,data=train.selection, geom="violin", na.rm=T)
Bplot <- qplot(B,B,data=train.selection, geom="violin", na.rm=T)
Cplot <- qplot(C,C,data=train.selection, geom="violin", na.rm=T)
Dplot <- qplot(D,D,data=train.selection, geom="violin", na.rm=T)
Eplot <- qplot(E,E,data=train.selection, geom="violin", na.rm=T)
Fplot <- qplot(F,F,data=train.selection, geom="violin", na.rm=T)
Gplot <- qplot(G,G,data=train.selection, geom="violin", na.rm=T)
grid.arrange(Aplot, Bplot,Cplot,Dplot,Eplot,Fplot,Gplot,ncol=4)
library(gridExtra)
grid.arrange(Aplot, Bplot,Cplot,Dplot,Eplot,Fplot,Gplot,ncol=4)
qplot(A,A,data=train.selection, geom="histogram", na.rm=T)
qplot(A,data=train.selection, geom="histogram", na.rm=T)
Aplot <- qplot(A,data=train.selection, geom="histogram", na.rm=T)
Bplot <- qplot(B,data=train.selection, geom="histogram", na.rm=T)
Cplot <- qplot(C,data=train.selection, geom="histogram", na.rm=T)
Dplot <- qplot(D,data=train.selection, geom="histogram", na.rm=T)
Eplot <- qplot(E,data=train.selection, geom="histogram", na.rm=T)
Fplot <- qplot(F,data=train.selection, geom="histogram", na.rm=T)
Gplot <- qplot(G,data=train.selection, geom="histogram", na.rm=T)
grid.arrange(Aplot, Bplot,Cplot,Dplot,Eplot,Fplot,Gplot,ncol=4)
Aplot <- qplot(A,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
Bplot <- qplot(B,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
Cplot <- qplot(C,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
Dplot <- qplot(D,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
Eplot <- qplot(E,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
Fplot <- qplot(F,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
Gplot <- qplot(G,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
grid.arrange(Aplot, Bplot,Cplot,Dplot,Eplot,Fplot,Gplot,ncol=4)
Aplot <- qplot(A,A,data=train.selection, geom="violin", na.rm=T)
Bplot <- qplot(B,B,data=train.selection, geom="violin", na.rm=T)
Cplot <- qplot(C,C,data=train.selection, geom="violin", na.rm=T)
Dplot <- qplot(D,D,data=train.selection, geom="violin", na.rm=T)
Eplot <- qplot(E,E,data=train.selection, geom="violin", na.rm=T)
Fplot <- qplot(F,F,data=train.selection, geom="violin", na.rm=T)
Gplot <- qplot(G,G,data=train.selection, geom="violin", na.rm=T)
grid.arrange(Aplot, Bplot,Cplot,Dplot,Eplot,Fplot,Gplot,ncol=4)
Aplot <- qplot(A,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
Bplot <- qplot(B,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
Cplot <- qplot(C,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
Dplot <- qplot(D,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
Eplot <- qplot(E,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
Fplot <- qplot(F,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
Gplot <- qplot(G,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
grid.arrange(Aplot, Bplot,Cplot,Dplot,Eplot,Fplot,Gplot,ncol=4)
Aplot <- qplot(A,data=train.selection, binwidth = 1, geom="density", na.rm=T)
grid.arrange(Aplot, Bplot,Cplot,Dplot,Eplot,Fplot,Gplot,ncol=4)
ggplot(train.selection, aes(x=A))
ggplot(train.selection, aes(x=A)) + geom_histogram()
ggplot(train.selection, aes(x=A)) + geom_histogram(aes(y = ..density..)) + geom_density()
ggplot(train.selection, aes(x=A)) + geom_density(aes(y = ..density..))
qplot(A,data=train.selection, binwidth = 1, geom="density", na.rm=T)
ggplot(train.selection, aes(x=A)) + geom_histogram() + geom_density(aes(y = ..density..))
ggplot(train.selection, aes(x=A)) + geom_histogram(binwidth=1) + geom_density(aes(y = ..density..))
ggplot(train.selection, aes(x=A)) + geom_histogram(binwidth=1)
ggplot(train.selection, aes(x=A, na.rm=T)) + geom_histogram(binwidth=1)
Aplot <- qplot(A,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
Bplot <- qplot(B,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
Cplot <- qplot(C,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
Dplot <- qplot(D,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
Eplot <- qplot(E,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
Fplot <- qplot(F,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
Gplot <- qplot(G,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
#ggplot(train.selection, aes(x=A, na.rm=T)) + geom_histogram(binwidth=1)
grid.arrange(Aplot, Bplot,Cplot,Dplot,Eplot,Fplot,Gplot,ncol=4)
head(train.selection)
qplot(state, data=train.selection, geom="histogram")
training <- subset(train.selection, state == "FL")
Aplot <- qplot(A,data=training, binwidth = 1, geom="histogram", na.rm=T)
Bplot <- qplot(B,data=training, binwidth = 1, geom="histogram", na.rm=T)
Cplot <- qplot(C,data=training, binwidth = 1, geom="histogram", na.rm=T)
Dplot <- qplot(D,data=training, binwidth = 1, geom="histogram", na.rm=T)
Eplot <- qplot(E,data=training, binwidth = 1, geom="histogram", na.rm=T)
Fplot <- qplot(F,data=training, binwidth = 1, geom="histogram", na.rm=T)
Gplot <- qplot(G,data=training, binwidth = 1, geom="histogram", na.rm=T)
grid.arrange(Aplot, Bplot,Cplot,Dplot,Eplot,Fplot,Gplot,ncol=4)
qplot(state, data=train.selection, geom="histogram")
training <- subset(train.selection, state == "NY")
Aplot <- qplot(A,data=training, binwidth = 1, geom="histogram", na.rm=T)
Bplot <- qplot(B,data=training, binwidth = 1, geom="histogram", na.rm=T)
Cplot <- qplot(C,data=training, binwidth = 1, geom="histogram", na.rm=T)
Dplot <- qplot(D,data=training, binwidth = 1, geom="histogram", na.rm=T)
Eplot <- qplot(E,data=training, binwidth = 1, geom="histogram", na.rm=T)
Fplot <- qplot(F,data=training, binwidth = 1, geom="histogram", na.rm=T)
Gplot <- qplot(G,data=training, binwidth = 1, geom="histogram", na.rm=T)
grid.arrange(Aplot, Bplot,Cplot,Dplot,Eplot,Fplot,Gplot,ncol=4)
training <- subset(train.selection, state == "PA")
Aplot <- qplot(A,data=training, binwidth = 1, geom="histogram", na.rm=T)
Bplot <- qplot(B,data=training, binwidth = 1, geom="histogram", na.rm=T)
Cplot <- qplot(C,data=training, binwidth = 1, geom="histogram", na.rm=T)
Dplot <- qplot(D,data=training, binwidth = 1, geom="histogram", na.rm=T)
Eplot <- qplot(E,data=training, binwidth = 1, geom="histogram", na.rm=T)
Fplot <- qplot(F,data=training, binwidth = 1, geom="histogram", na.rm=T)
Gplot <- qplot(G,data=training, binwidth = 1, geom="histogram", na.rm=T)
grid.arrange(Aplot, Bplot,Cplot,Dplot,Eplot,Fplot,Gplot,ncol=4)
######################################################
#  Kaggle Allstate Purchase Prediction Challenge
#  Jason Green
#  February, 24th 2014
#  https://github.com/Convalytics/kaggle-allstate-predictor
#  Last Updated: 2/24/2014
######################################################
# Load Packages
library(plyr)
# Set Working Directory
setwd("~/GitHub/kaggle-allstate-predictor")
# Import Data
sampleSubmission <- read.csv("~/GitHub/kaggle-allstate-predictor/sampleSubmission.csv")
test <- read.csv("~/GitHub/kaggle-allstate-predictor/test_v2.csv")
# test <- read.csv("~/GitHub/kaggle-allstate-predictor/test.csv")
train <- read.csv("~/GitHub/kaggle-allstate-predictor/train.csv")
head(sampleSubmission, n=5)
head(test, n=5)
head(train, n=5)
#### Last Quote submission
sub <- test[ !duplicated( test$customer_ID, fromLast=TRUE ) , ]
head(sub)
sub$F[sub$state == "NY"] <- 0
sub$G[sub$state == "FL" && sub$G < 3] <- 3
sub$plan <- paste0( sub[,18],sub[,19],sub[,20],sub[,21],sub[,22],sub[,23],sub[,24] )
lastQuote <- sub[,c]
write.csv(sub[,c(1,ncol(sub))],paste0('sub.persistent.csv'),quote=FALSE , row.names = FALSE )
######################################################
#  Kaggle Allstate Purchase Prediction Challenge
#  Jason Green
#  February, 24th 2014
#  https://github.com/Convalytics/kaggle-allstate-predictor
#  Last Updated: 2/24/2014
######################################################
# Load Packages
library(plyr)
library(ggplot2)
library(gridExtra)
# Set Working Directory
setwd("~/GitHub/kaggle-allstate-predictor")
# Import Data
sampleSubmission <- read.csv("~/GitHub/kaggle-allstate-predictor/sampleSubmission.csv")
test <- read.csv("~/GitHub/kaggle-allstate-predictor/test_v2.csv")
#test <- read.csv("~/GitHub/kaggle-allstate-predictor/test.csv")
train <- read.csv("~/GitHub/kaggle-allstate-predictor/train.csv")
head(sampleSubmission, n=5)
head(test, n=5)
head(train, n=5)
train.quotes <- subset(train, train$record_type == 0)
train.selection <- subset(train, train$record_type == 1)
# Aplot <- qplot(A,A,data=train.selection, geom="violin", na.rm=T)
# Bplot <- qplot(B,B,data=train.selection, geom="violin", na.rm=T)
# Cplot <- qplot(C,C,data=train.selection, geom="violin", na.rm=T)
# Dplot <- qplot(D,D,data=train.selection, geom="violin", na.rm=T)
# Eplot <- qplot(E,E,data=train.selection, geom="violin", na.rm=T)
# Fplot <- qplot(F,F,data=train.selection, geom="violin", na.rm=T)
# Gplot <- qplot(G,G,data=train.selection, geom="violin", na.rm=T)
Aplot <- qplot(A,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
Bplot <- qplot(B,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
Cplot <- qplot(C,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
Dplot <- qplot(D,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
Eplot <- qplot(E,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
Fplot <- qplot(F,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
Gplot <- qplot(G,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
grid.arrange(Aplot, Bplot,Cplot,Dplot,Eplot,Fplot,Gplot,ncol=4)
#ggplot(train.selection, aes(x=A, na.rm=T)) + geom_histogram(binwidth=1)
qplot(state, data=train.selection, geom="histogram")
qplot(state, data=test, geom="histogram")
training <- subset(train.selection, state == "OH")
Aplot <- qplot(A,data=training, binwidth = 1, geom="histogram", na.rm=T)
Bplot <- qplot(B,data=training, binwidth = 1, geom="histogram", na.rm=T)
Cplot <- qplot(C,data=training, binwidth = 1, geom="histogram", na.rm=T)
Dplot <- qplot(D,data=training, binwidth = 1, geom="histogram", na.rm=T)
Eplot <- qplot(E,data=training, binwidth = 1, geom="histogram", na.rm=T)
Fplot <- qplot(F,data=training, binwidth = 1, geom="histogram", na.rm=T)
Gplot <- qplot(G,data=training, binwidth = 1, geom="histogram", na.rm=T)
grid.arrange(Aplot, Bplot,Cplot,Dplot,Eplot,Fplot,Gplot,ncol=4)
sub$G[sub$state == "OH" && sub$G = 1] <- 3
sub$G[sub$state == "OH" && sub$G == 1] <- 3
##################################################################################
# Build submission file.
sub$plan <- paste0( sub[,18],sub[,19],sub[,20],sub[,21],sub[,22],sub[,23],sub[,24] )
lastQuote <- sub[,c]
write.csv(sub[,c(1,ncol(sub))],paste0('convalytics_allstate_6.csv'),quote=FALSE , row.names = FALSE )
######################################################
#  Kaggle Allstate Purchase Prediction Challenge
#  Jason Green
#  February, 24th 2014
#  https://github.com/Convalytics/kaggle-allstate-predictor
#  Last Updated: 2/24/2014
######################################################
# Load Packages
library(plyr)
# Set Working Directory
setwd("~/GitHub/kaggle-allstate-predictor")
# Import Data
sampleSubmission <- read.csv("~/GitHub/kaggle-allstate-predictor/sampleSubmission.csv")
test <- read.csv("~/GitHub/kaggle-allstate-predictor/test_v2.csv")
# test <- read.csv("~/GitHub/kaggle-allstate-predictor/test.csv")
train <- read.csv("~/GitHub/kaggle-allstate-predictor/train.csv")
head(sampleSubmission, n=5)
head(test, n=5)
head(train, n=5)
#### Last Quote submission
#Gets the last quoted plan
sub <- test[ !duplicated( test$customer_ID, fromLast=TRUE ) , ]
#### RULES ###########
# The F option in NY is always 0
sub$F[sub$state == "NY"] <- 0
# The G option in FL is never 1 or 2, and is 3 80% of the time.
#sub$G[sub$state == "FL" && sub$G < 3] <- 3
# OH - G is never 1. Is 3 80% of the time.
sub$G[sub$state == "OH" && sub$G == 1] <- 3
##################################################################################
# Build submission file.
sub$plan <- paste0( sub[,18],sub[,19],sub[,20],sub[,21],sub[,22],sub[,23],sub[,24] )
lastQuote <- sub[,c]
write.csv(sub[,c(1,ncol(sub))],paste0('convalytics_allstate_7.csv'),quote=FALSE , row.names = FALSE )
subset(sub,state=="OH")
######################################################
#  Kaggle Allstate Purchase Prediction Challenge
#  Jason Green
#  February, 24th 2014
#  https://github.com/Convalytics/kaggle-allstate-predictor
#  Last Updated: 2/24/2014
######################################################
# Load Packages
library(plyr)
# Set Working Directory
setwd("~/GitHub/kaggle-allstate-predictor")
# Import Data
sampleSubmission <- read.csv("~/GitHub/kaggle-allstate-predictor/sampleSubmission.csv")
test <- read.csv("~/GitHub/kaggle-allstate-predictor/test_v2.csv")
# test <- read.csv("~/GitHub/kaggle-allstate-predictor/test.csv")
train <- read.csv("~/GitHub/kaggle-allstate-predictor/train.csv")
head(sampleSubmission, n=5)
head(test, n=5)
head(train, n=5)
#### Last Quote submission
#Gets the last quoted plan
sub <- test[ !duplicated( test$customer_ID, fromLast=TRUE ) , ]
subset(sub,state=="OH")
subset(sub,state == "OH" && G == 1)
subset(sub,state == "OH" && G != 1)
subset(sub,state == "OH" && G != 1)
subset(sub,state == "OH" && G == 3)
subset(sub,state == "OH" )
subset(sub,state == "OH" & G == 1 )
subset(sub,state == "OH" & G == 2 )
subset(sub,state == "FL" & G < 3 )
subset(sub,state == "FL" && G < 3 )
subset(sub,state == "OH" & G < 3 )
subset(sub,state == "OH" & G < 2 )
######################################################
#  Kaggle Allstate Purchase Prediction Challenge
#  Jason Green
#  February, 24th 2014
#  https://github.com/Convalytics/kaggle-allstate-predictor
#  Last Updated: 2/24/2014
######################################################
# Load Packages
library(plyr)
# Set Working Directory
setwd("~/GitHub/kaggle-allstate-predictor")
# Import Data
sampleSubmission <- read.csv("~/GitHub/kaggle-allstate-predictor/sampleSubmission.csv")
test <- read.csv("~/GitHub/kaggle-allstate-predictor/test_v2.csv")
# test <- read.csv("~/GitHub/kaggle-allstate-predictor/test.csv")
train <- read.csv("~/GitHub/kaggle-allstate-predictor/train.csv")
head(sampleSubmission, n=5)
head(test, n=5)
head(train, n=5)
#### Last Quote submission
#Gets the last quoted plan
sub <- test[ !duplicated( test$customer_ID, fromLast=TRUE ) , ]
#### RULES ###########
#Test
#subset(sub,state == "OH" & G < 2 )
# The F option in NY is always 0
sub$F[sub$state == "NY"] <- 0
# The G option in FL is never 1 or 2, and is 3 80% of the time.
sub$G[sub$state == "FL" & sub$G < 3] <- 3
# OH - G is never 1. Is 3 80% of the time.
# None found in the test set. :(
sub$G[sub$state == "OH" & sub$G == 1] <- 3
##################################################################################
# Build submission file.
sub$plan <- paste0( sub[,18],sub[,19],sub[,20],sub[,21],sub[,22],sub[,23],sub[,24] )
lastQuote <- sub[,c]
write.csv(sub[,c(1,ncol(sub))],paste0('convalytics_allstate_7.csv'),quote=FALSE , row.names = FALSE )
