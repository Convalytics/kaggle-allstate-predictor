ScoreBoxesByCOGS <- ggplot(csat, aes(cut(COGS, seq(0,700,100)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ScoreBoxes <- ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
ScoreCounts <- ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw()
grid.arrange(countsByScore, ScoreCounts, countsByCOGS, COGSBoxesByScore, ScoreBoxes, ScoreBoxesByCOGS, nrow=2)
#####################################
ScoreBoxesByCOGS <- ggplot(csat, aes(cut(COGS, seq(0,700,50)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ScoreBoxes <- ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
ScoreCounts <- ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw()
grid.arrange(countsByScore, ScoreCounts, countsByCOGS, COGSBoxesByScore, ScoreBoxes, ScoreBoxesByCOGS, nrow=2)
#####################################
countsByCOGS <- ggplot(csat, aes(COGS)) + geom_histogram(binwidth=50, fill="gray", color="black") + theme_bw()
COGSBoxesByScore <- ggplot(csat, aes(factor(CLAGENT),COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(factor(CLAGENT), COGS, data=csat, geom="boxplot") #+ geom_jitter()
ScoreBoxesByCOGS <- ggplot(csat, aes(cut(COGS, seq(0,700,50)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ScoreBoxes <- ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
ScoreCounts <- ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw()
grid.arrange(countsByScore, ScoreCounts, countsByCOGS, COGSBoxesByScore, ScoreBoxes, ScoreBoxesByCOGS, nrow=2)
#####################################
ggplot(csat, aes(goodScore)) + geom_histogram(aes(y = ..density..), fill="gray", color="black") + theme_bw()
ggplot(csat, aes(goodScore)) + geom_density()
ggplot(csat, aes(goodScore)) + geom_histogram(aes(y = ..density..), fill="gray", color="black") + theme_bw() + geom_density()
ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw() + geom_density()
countsByScore <- ggplot(csat, aes(factor(CLAGENT))) + geom_histogram(fill="gray", color="black") + theme_bw()
countsByCOGS <- ggplot(csat, aes(COGS)) + geom_histogram(binwidth=50, fill="gray", color="black") + theme_bw()
COGSBoxesByScore <- ggplot(csat, aes(factor(CLAGENT),COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(factor(CLAGENT), COGS, data=csat, geom="boxplot") #+ geom_jitter()
ScoreBoxesByCOGS <- ggplot(csat, aes(cut(COGS, seq(0,700,50)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ScoreBoxes <- ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
ScoreCounts <- ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw()
grid.arrange(countsByScore, ScoreCounts, countsByCOGS, COGSBoxesByScore, ScoreBoxes, ScoreBoxesByCOGS, nrow=2)
#####################################
#install.packages("ggplot2")  # Install GGPlot2 *Only needed if not already installed.
library(ggplot2)              # ggplot2 for creating the charts
library(scales)               # scales for the dollar formatting of the axis.
library(gridExtra)
#Load the csv file containing the values:
csat <- read.csv("C:/Users/jgreen/Documents/R_Files/CSAT_COGS.csv")
csat$goodScore <- subset(csat, CLAGENT >= 9)
csat$goodScore[csat$CLAGENT >= 9] <- "Y"
csat$goodScore[csat$CLAGENT < 9] <- "N"
csat$RESPONSE_DATE <- as.Date(csat$RESPONSE_DATE, format="%m/%d/%Y")
csat <- subset(csat, RESPONSE_DATE >= '2013-10-01')
#summary(csat)
#names(csat)
#with(csat, plot(CLAGENT, COGS))
#ggplot(csat, aes(factor(CLAGENT),COGS)) + geom_jitter()
#hist(csat$CLAGENT)
countsByScore <- ggplot(csat, aes(factor(CLAGENT))) + geom_histogram(fill="gray", color="black") + theme_bw()
countsByCOGS <- ggplot(csat, aes(COGS)) + geom_histogram(binwidth=50, fill="gray", color="black") + theme_bw()
COGSBoxesByScore <- ggplot(csat, aes(factor(CLAGENT),COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(factor(CLAGENT), COGS, data=csat, geom="boxplot") #+ geom_jitter()
ScoreBoxesByCOGS <- ggplot(csat, aes(cut(COGS, seq(0,700,50)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ScoreBoxes <- ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
ScoreCounts <- ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw()
grid.arrange(countsByScore, ScoreCounts, countsByCOGS, COGSBoxesByScore, ScoreBoxes, ScoreBoxesByCOGS, nrow=2)
#####################################
countsByScore <- ggplot(csat, aes(factor(CLAGENT))) + geom_histogram(fill="gray", color="black") + theme_bw()
countsByCOGS <- ggplot(csat, aes(COGS)) + geom_histogram(binwidth=50, fill="gray", color="black") + theme_bw()
COGSBoxesByScore <- ggplot(csat, aes(factor(CLAGENT),COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(factor(CLAGENT), COGS, data=csat, geom="boxplot") #+ geom_jitter()
ScoreBoxesByCOGS <- ggplot(csat, aes(cut(COGS, seq(0,600,200)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ScoreBoxes <- ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
ScoreCounts <- ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw()
grid.arrange(countsByScore, ScoreCounts, countsByCOGS, COGSBoxesByScore, ScoreBoxes, ScoreBoxesByCOGS, nrow=2)
#####################################
ggplot(csat, aes(cut(COGS, seq(0,600,100)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='text',size = 3, color='red') + theme_bw()
ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
mean(csat$COGS ~ csat$CLAGENT)
mean(csat$CLAGENT ~ csat$COGS)
mean(csat$CLAGENT, csat$COGS)
tapply(csat$CLAGENT, csat$COGS, FUN=mean)
tapply(csat$COGS, csat$CLAGENT, FUN=mean)
aggregate(COGS~CLAGENT, data=csat, FUN="mean")
aggregate(COGS~goodScore, data=csat, FUN="mean")
tapply(csat$COGS, csat$goodScore, FUN=mean)
summaryBy(COGS~goodScore, data=csat, FUN="mean")
library(doBy)
install.packages("doBy")
library(doBy)                 # doBy for summarization
summaryBy(COGS~goodScore, data=csat, FUN="mean")
summaryBy(COGS~goodScore, data=csat, FUN="mean")
c(count=length(x), mean=mean(x),median=median(x)))
summaryBy(COGS~goodScore, data=csat, FUN="mean")
c(count=length(x), mean=mean(x),median=median(x))
summaryBy(COGS~goodScore, data=csat, FUN=function(x)
c(count=length(x), mean=mean(x),median=median(x)))
summaryBy(COGS~goodScore, data=csat, na.rm, FUN=function(x)
c(count=length(x), mean=mean(x),median=median(x)))
library(plyr)
summaryBy(COGS~goodScore, data=csat, FUN=function(x)
c(count=length(x), mean=mean(x, na.rm=TRUE),median=median(x)))
summaryBy(COGS~goodScore, data=csat, FUN=function(x)
c(count=length(x), mean=mean(x, na.rm=TRUE),median=median(x, na.rm=TRUE)))
tapply(csat$COGS, csat$goodScore, FUN=mean, na.rm=TRUE)
aggregate(COGS~goodScore, data=csat, FUN="mean", na.rm=TRUE)
ddply(csat, "goodScore", summarize, mean = mean(COGS, na.rm=TRUE))
names(csat)
ddply(csat, c("goodScore","PROP.STATE"), summarize, mean = mean(COGS, na.rm=TRUE))
ddply(csat, c("goodScore","PROP.STATE"), summarize,
mean = mean(COGS, na.rm=TRUE),
median = median(COGS, na.rm=TRUE))
ddply(csat, c("goodScore","PROP.STATE"), summarize,
Count = length(PROP.STATE),
mean = mean(COGS, na.rm=TRUE),
median = median(COGS, na.rm=TRUE))
DF <- ddply(csat, c("goodScore","PROP.STATE"), summarize,
Count = length(PROP.STATE),
mean = mean(COGS, na.rm=TRUE),
median = median(COGS, na.rm=TRUE))
edit(DF)
#install.packages("ggplot2")  # Install GGPlot2 *Only needed if not already installed.
#install.packages("doBy")
library(ggplot2)              # ggplot2 for creating the charts
library(scales)               # scales for the dollar formatting of the axis.
library(gridExtra)
library(doBy)                 # doBy for summarization
library(plyr)
#Load the csv file containing the values:
csat <- read.csv("C:/Users/jgreen/Documents/R_Files/CSAT_COGS.csv")
csat$goodScore <- subset(csat, CLAGENT >= 9)
csat$goodScore[csat$CLAGENT >= 9] <- "Y"
csat$goodScore[csat$CLAGENT < 9] <- "N"
csat$RESPONSE_DATE <- as.Date(csat$RESPONSE_DATE, format="%m/%d/%Y")
csat <- subset(csat, RESPONSE_DATE >= '2013-10-01')
#summary(csat)
#names(csat)
#with(csat, plot(CLAGENT, COGS))
#ggplot(csat, aes(factor(CLAGENT),COGS)) + geom_jitter()
#hist(csat$CLAGENT)
countsByScore <- ggplot(csat, aes(factor(CLAGENT))) + geom_histogram(fill="gray", color="black") + theme_bw()
countsByCOGS <- ggplot(csat, aes(COGS)) + geom_histogram(binwidth=50, fill="gray", color="black") + theme_bw()
COGSBoxesByScore <- ggplot(csat, aes(factor(CLAGENT),COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(factor(CLAGENT), COGS, data=csat, geom="boxplot") #+ geom_jitter()
ScoreBoxesByCOGS <- ggplot(csat, aes(cut(COGS, seq(0,600,100)), CLAGENT)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
#qplot(cut(COGS, seq(0,700,30)), CLAGENT, data=csat, geom="boxplot") + geom_jitter()
ScoreBoxes <- ggplot(csat, aes(goodScore,COGS)) + geom_boxplot(outlier.colour = "gray") +
stat_summary(fun.y='mean', geom='point',size = 3, color='red') + theme_bw()
ScoreCounts <- ggplot(csat, aes(goodScore)) + geom_histogram(fill="gray", color="black") + theme_bw()
grid.arrange(countsByScore, ScoreCounts, countsByCOGS, COGSBoxesByScore, ScoreBoxes, ScoreBoxesByCOGS, nrow=2)
max(csat$RESPONSE_DATE)
ddply(csat, "goodScore", summarize, mean = mean(COGS, na.rm=TRUE))
# Using doBy
summaryBy(COGS~goodScore, data=csat, FUN=function(x)
c(count=length(x), mean=mean(x, na.rm=TRUE),median=median(x, na.rm=TRUE)))
install.packages("knitr")
install.packages("plyr")
install.packages("quantmod")
load(url("http://bit.ly/dasi_gss_data"))
view(gss)
View(gss)
load(url("http://bit.ly/dasi_anes_data"))
View(anes)
summary(anes$presapp_job)
summary(anes$presvote2012_x)
barplot(table(anes$presapp_job))
barplot(table(anes$presvote2012_x))
barplot(table(anes$presvote2012_x, na.rm=F))
barplot(table(anes$presvote2012_x), na.rm=F)
plot(table(anes$presapp_job))
library(knitr)
anes(1:100,c("presapp_job","presvote2012_x"))
anes[1:100,c("presapp_job","presvote2012_x")]
anes[1:50,c("presapp_job","presvote2012_x")]
# LPS COGS Research
# 3/10/2014
# Jason Green
library(knitr)
library(plyr)
library(ggplot2)
library(gridExtra)
# Read in spreadsheet.
lpscogs <- read.csv("C:/Users/jgreen/Documents/_ReportingAndAnalysis/COGS/LPSCOGSAnalysis/LPSCOGS.csv")
# Quick Summary:
summary(lpscogs)
# Why are these amounts so high???
subset(lpscogs, SumFeeAmount > 10000)
# Why are these amounts so low???
subset(lpscogs, SumFeeAmount < -5000)
# Trim Cogs to reasonable amounts.  (exclude outliers)
cogs.trimmed <- subset(lpscogs, SumFeeAmount < 10000)
cogs.trimmed <- subset(cogs.trimmed, SumFeeAmount > -5000)
sum(lpscogs$SumFeeAmount)
sum(cogs.trimmed$SumFeeAmount)
boxplot(cogs.trimmed$SumFeeAmount ~ cogs.trimmed$Code)
barplot(table(as.factor(lpscogs$Code)))
# Summarize by Code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CountByCode <- ggplot(cogs.trimmed, aes(x=Code, na.rm=F)) + geom_histogram(fill="navy", color="black") + theme_bw()
AmountBoxByCode <- ggplot(cogs.trimmed, aes(x=Code, y=SumFeeAmount)) + geom_boxplot(fill = "yellow", color="black") + theme_bw()
FeesByCode <- ddply(cogs.trimmed, "Code", summarise, SumOfFees = sum(SumFeeAmount))
SumFeesByCode <- ggplot(FeesByCode, aes(x=Code, y=SumOfFees)) + geom_bar(stat="identity", fill="yellow", color="black") + theme_bw()
#ggplot(cogs.trimmed, aes(x=Code, y=SumFeeAmount)) + geom_bar(stat="identity", fill="yellow", color="black") + theme_bw()
grid.arrange(CountByCode, AmountBoxByCode, SumFeesByCode, ncol=3 )
# End Summarize by Code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Summarize by ProductCode ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CountByProductCode <- ggplot(cogs.trimmed, aes(x=ProductCode, na.rm=F)) + geom_histogram(fill="navy", color="black") + theme_bw()
AmountBoxByProductCode <- ggplot(cogs.trimmed, aes(x=ProductCode, y=SumFeeAmount)) + geom_boxplot(fill = "yellow", color="black") + theme_bw()
FeesByProductCode <- ddply(cogs.trimmed, "ProductCode", summarise, SumOfFees = sum(SumFeeAmount))
SumFeesByProductCode <- ggplot(FeesByProductCode, aes(x=ProductCode, y=SumOfFees)) + geom_bar(stat="identity", fill="yellow", color="black") + theme_bw()
grid.arrange(CountByProductCode, AmountBoxByProductCode, SumFeesByProductCode, ncol=3 )
# Summarize by Products_Desc ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CountByProducts_Desc <- ggplot(cogs.trimmed, aes(x=Products_Desc, na.rm=F)) + geom_histogram(fill="navy", color="black") + theme_bw()
AmountBoxByProducts_Desc <- ggplot(cogs.trimmed, aes(x=Products_Desc, y=SumFeeAmount)) + geom_boxplot(fill = "yellow", color="black") + theme_bw()
FeesByProducts_Desc <- ddply(cogs.trimmed, "Products_Desc", summarise, SumOfFees = sum(SumFeeAmount))
SumFeesByProducts_Desc <- ggplot(FeesByProducts_Desc, aes(x=Products_Desc, y=SumOfFees)) + geom_bar(stat="identity", fill="yellow", color="black") + theme_bw()
FeesByProducts_Desc <- FeesByProducts_Desc[order(-FeesByProducts_Desc$SumOfFees),]
FeesByProducts_Desc$Products_Desc <- factor(FeesByProducts_Desc$Products_Desc, levels=FeesByProducts_Desc$Products_Desc)
ggplot(FeesByProducts_Desc, aes(x=Products_Desc, y=SumOfFees)) + geom_bar(stat="identity", fill="yellow", color="black") + theme_bw() + coord_flip()
grid.arrange(CountByProducts_Desc, AmountBoxByProducts_Desc, SumFeesByProducts_Desc, ncol=3 )
SumFeesByProducts_Desc <- ggplot(FeesByProducts_Desc, aes(x=Products_Desc, y=SumOfFees)) + geom_bar(stat="identity", fill="yellow", color="black") + theme_bw()
ggplot(FeesByProducts_Desc, aes(x=Products_Desc, y=SumOfFees)) + geom_bar(stat="identity", fill="yellow", color="black") + theme_bw()
ggplot(FeesByProducts_Desc, aes(x=Products_Desc, y=SumOfFees)) + geom_bar(stat="identity", fill="yellow", color="black") + theme_bw() + coord_flip()
SumFeesByProducts_Desc <- ggplot(FeesByProducts_Desc, aes(x=Products_Desc, y=SumOfFees)) + geom_bar(stat="identity", fill="yellow", color="black") + theme_bw() + coord_flip()
grid.arrange(CountByProducts_Desc, AmountBoxByProducts_Desc, SumFeesByProducts_Desc, ncol=3 )
AmountBoxByProducts_Desc <- ggplot(cogs.trimmed, aes(x=Products_Desc, y=SumFeeAmount)) + geom_boxplot(fill = "yellow", color="black") + theme_bw() + coord_flip()
grid.arrange(CountByProducts_Desc, AmountBoxByProducts_Desc, SumFeesByProducts_Desc, ncol=3 )
CountByProducts_Desc <- ggplot(cogs.trimmed, aes(x=Products_Desc, na.rm=F)) + geom_histogram(fill="navy", color="black") + theme_bw()  + coord_flip()
grid.arrange(CountByProducts_Desc, AmountBoxByProducts_Desc, SumFeesByProducts_Desc, ncol=3 )
grid.arrange(CountByProducts_Desc, AmountBoxByProducts_Desc, ncol=2 )
names(lpscogs)
# LPS COGS Research
# 3/10/2014
# Jason Green
library(knitr)
library(plyr)
library(ggplot2)
library(gridExtra)
# Read in spreadsheet.
lpscogs <- read.csv("C:/Users/jgreen/Documents/_ReportingAndAnalysis/COGS/LPSCOGSAnalysis/LPSCOGS.csv")
# Quick Summary:
summary(lpscogs)
# Why are these amounts so high???
subset(lpscogs, SumFeeAmount > 10000)
# Why are these amounts so low???
subset(lpscogs, SumFeeAmount < -5000)
# Trim Cogs to reasonable amounts.  (exclude outliers)
cogs.trimmed <- subset(lpscogs, SumFeeAmount < 10000)
cogs.trimmed <- subset(cogs.trimmed, SumFeeAmount > -5000)
sum(lpscogs$SumFeeAmount)
sum(cogs.trimmed$SumFeeAmount)
# Summarize by Code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CountByCode <- ggplot(cogs.trimmed, aes(x=Code, na.rm=F)) + geom_histogram(fill="navy", color="black") + theme_bw()
AmountBoxByCode <- ggplot(cogs.trimmed, aes(x=Code, y=SumFeeAmount)) + geom_boxplot(fill = "yellow", color="black") + theme_bw()
FeesByCode <- ddply(cogs.trimmed, "Code", summarise, SumOfFees = sum(SumFeeAmount))
SumFeesByCode <- ggplot(FeesByCode, aes(x=Code, y=SumOfFees)) + geom_bar(stat="identity", fill="yellow", color="black") + theme_bw()
#ggplot(cogs.trimmed, aes(x=Code, y=SumFeeAmount)) + geom_bar(stat="identity", fill="yellow", color="black") + theme_bw()
grid.arrange(CountByCode, AmountBoxByCode, SumFeesByCode, ncol=3 )
# End Summarize by Code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Summarize by ProductCode ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CountByProductCode <- ggplot(cogs.trimmed, aes(x=ProductCode, na.rm=F)) + geom_histogram(fill="navy", color="black") + theme_bw()
AmountBoxByProductCode <- ggplot(cogs.trimmed, aes(x=ProductCode, y=SumFeeAmount)) + geom_boxplot(fill = "yellow", color="black") + theme_bw()
FeesByProductCode <- ddply(cogs.trimmed, "ProductCode", summarise, SumOfFees = sum(SumFeeAmount))
SumFeesByProductCode <- ggplot(FeesByProductCode, aes(x=ProductCode, y=SumOfFees)) + geom_bar(stat="identity", fill="yellow", color="black") + theme_bw()
grid.arrange(CountByProductCode, AmountBoxByProductCode, SumFeesByProductCode, ncol=3 )
# Summarize by Products_Desc ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CountByProducts_Desc <- ggplot(cogs.trimmed, aes(x=Products_Desc, na.rm=F)) + geom_histogram(fill="navy", color="black") + theme_bw()  + coord_flip()
AmountBoxByProducts_Desc <- ggplot(cogs.trimmed, aes(x=Products_Desc, y=SumFeeAmount)) + geom_boxplot(fill = "yellow", color="black") + theme_bw() + coord_flip()
FeesByProducts_Desc <- ddply(cogs.trimmed, "Products_Desc", summarise, SumOfFees = sum(SumFeeAmount))
SumFeesByProducts_Desc <- ggplot(FeesByProducts_Desc, aes(x=Products_Desc, y=SumOfFees)) + geom_bar(stat="identity", fill="yellow", color="black") + theme_bw() + coord_flip()
FeesByProducts_Desc <- FeesByProducts_Desc[order(-FeesByProducts_Desc$SumOfFees),]
FeesByProducts_Desc$Products_Desc <- factor(FeesByProducts_Desc$Products_Desc, levels=FeesByProducts_Desc$Products_Desc)
#ggplot(FeesByProducts_Desc, aes(x=Products_Desc, y=SumOfFees)) + geom_bar(stat="identity", fill="yellow", color="black") + theme_bw() + coord_flip()
grid.arrange(CountByProducts_Desc, AmountBoxByProducts_Desc, ncol=2 )
# Summarize by Code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CountByCode <- ggplot(lpscogs, aes(x=Code, na.rm=F)) + geom_histogram(fill="navy", color="black") + theme_bw()
AmountBoxByCode <- ggplot(lpscogs, aes(x=Code, y=SumCheckAmount)) + geom_boxplot(fill = "yellow", color="black") + theme_bw()
FeesByCode <- ddply(lpscogs, "Code", summarise, SumCheckAmount = sum(SumCheckAmount))
SumFeesByCode <- ggplot(FeesByCode, aes(x=Code, y=SumCheckAmount)) + geom_bar(stat="identity", fill="yellow", color="black") + theme_bw()
#ggplot(cogs.trimmed, aes(x=Code, y=SumFeeAmount)) + geom_bar(stat="identity", fill="yellow", color="black") + theme_bw()
grid.arrange(CountByCode, AmountBoxByCode, SumFeesByCode, ncol=3 )
ggplot(lpscogs, aes(x=Code, na.rm=F)) + geom_histogram(fill="navy", color="black") + theme_bw()
ggplot(lpscogs, aes(x=Code, y=SumCheckAmount)) + geom_boxplot(fill = "yellow", color="black") + theme_bw()
FeesByCode <- ddply(lpscogs, "Code", summarise, SumCheckAmount = sum(SumCheckAmount))
FeesByCode
FeesByCode <- ddply(lpscogs, "Code", summarise, SumCheckAmount = sum(SumCheckAmount, na.rm=T))
FeesByCode
SumFeesByCode <- ggplot(FeesByCode, aes(x=Code, y=SumCheckAmount)) + geom_bar(stat="identity", fill="yellow", color="black") + theme_bw()
grid.arrange(CountByCode, AmountBoxByCode, SumFeesByCode, ncol=3 )
CountByProducts_Desc <- ggplot(lpscogs, aes(x=Products_Desc, na.rm=F)) + geom_histogram(fill="navy", color="black") + theme_bw()  + coord_flip()
AmountBoxByProducts_Desc <- ggplot(lpscogs, aes(x=Products_Desc, y=SumCheckAmount)) + geom_boxplot(fill = "yellow", color="black") + theme_bw() + coord_flip()
FeesByProducts_Desc <- ddply(lpscogs, "Products_Desc", summarise, SumOfFees = sum(SumCheckAmount))
SumFeesByProducts_Desc <- ggplot(FeesByProducts_Desc, aes(x=Products_Desc, y=SumOfFees)) + geom_bar(stat="identity", fill="yellow", color="black") + theme_bw() + coord_flip()
FeesByProducts_Desc <- FeesByProducts_Desc[order(-FeesByProducts_Desc$SumOfFees),]
FeesByProducts_Desc$Products_Desc <- factor(FeesByProducts_Desc$Products_Desc, levels=FeesByProducts_Desc$Products_Desc)
#ggplot(FeesByProducts_Desc, aes(x=Products_Desc, y=SumOfFees)) + geom_bar(stat="identity", fill="yellow", color="black") + theme_bw() + coord_flip()
grid.arrange(CountByProducts_Desc, AmountBoxByProducts_Desc, ncol=2 )
FeesByProducts_Desc <- ddply(lpscogs, "Products_Desc", summarise, SumOfFees = sum(SumCheckAmount), na.rm=T)
SumFeesByProducts_Desc <- ggplot(FeesByProducts_Desc, aes(x=Products_Desc, y=SumOfFees)) + geom_bar(stat="identity", fill="yellow", color="black") + theme_bw() + coord_flip()
FeesByProducts_Desc <- FeesByProducts_Desc[order(-FeesByProducts_Desc$SumOfFees),]
FeesByProducts_Desc$Products_Desc <- factor(FeesByProducts_Desc$Products_Desc, levels=FeesByProducts_Desc$Products_Desc)
#ggplot(FeesByProducts_Desc, aes(x=Products_Desc, y=SumOfFees)) + geom_bar(stat="identity", fill="yellow", color="black") + theme_bw() + coord_flip()
grid.arrange(CountByProducts_Desc, AmountBoxByProducts_Desc, ncol=2 )
AmountBoxByProducts_Desc <- ggplot(lpscogs, aes(x=Products_Desc, y=SumCheckAmount, na.rm=T)) + geom_boxplot(fill = "yellow", color="black") + theme_bw() + coord_flip()
CountByProducts_Desc <- ggplot(lpscogs, aes(x=Products_Desc, na.rm=F)) + geom_histogram(fill="navy", color="black") + theme_bw()  + coord_flip()
AmountBoxByProducts_Desc <- ggplot(lpscogs, aes(x=Products_Desc, y=SumCheckAmount, na.rm=T)) + geom_boxplot(fill = "yellow", color="black") + theme_bw() + coord_flip()
FeesByProducts_Desc <- ddply(lpscogs, "Products_Desc", summarise, SumOfFees = sum(SumCheckAmount), na.rm=T)
SumFeesByProducts_Desc <- ggplot(FeesByProducts_Desc, aes(x=Products_Desc, y=SumOfFees)) + geom_bar(stat="identity", fill="yellow", color="black") + theme_bw() + coord_flip()
FeesByProducts_Desc <- FeesByProducts_Desc[order(-FeesByProducts_Desc$SumOfFees),]
FeesByProducts_Desc$Products_Desc <- factor(FeesByProducts_Desc$Products_Desc, levels=FeesByProducts_Desc$Products_Desc)
#ggplot(FeesByProducts_Desc, aes(x=Products_Desc, y=SumOfFees)) + geom_bar(stat="identity", fill="yellow", color="black") + theme_bw() + coord_flip()
grid.arrange(CountByProducts_Desc, AmountBoxByProducts_Desc, ncol=2 )
grid.arrange(CountByProducts_Desc, AmountBoxByProducts_Desc, FeesByProducts_Desc, ncol=3)
factor(FeesByProducts_Desc$Products_Desc, levels=FeesByProducts_Desc$Products_Desc)
FeesByProducts_Desc <- ggplot(FeesByProducts_Desc, aes(x=Products_Desc, y=SumOfFees)) + geom_bar(stat="identity", fill="yellow", color="black") + theme_bw() + coord_flip()
grid.arrange(CountByProducts_Desc, AmountBoxByProducts_Desc, FeesByProducts_Desc, ncol=3)
names(lpscogs)
setwd("~/GitHub/kaggle-allstate-predictor")
Aplot <- qplot(A,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
Bplot <- qplot(B,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
Cplot <- qplot(C,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
Dplot <- qplot(D,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
Eplot <- qplot(E,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
Fplot <- qplot(F,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
Gplot <- qplot(G,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
grid.arrange(Aplot, Bplot,Cplot,Dplot,Eplot,Fplot,Gplot,ncol=4)
######################################################
#  Kaggle Allstate Purchase Prediction Challenge
#  Jason Green
#  February, 24th 2014
#  https://github.com/Convalytics/kaggle-allstate-predictor
#  Last Updated: 2/24/2014
######################################################
# Load Packages
library(plyr)
library(ggplot2)
library(gridExtra)
library(qcc)    # for pareto.chart
# Set Working Directory
setwd("~/GitHub/kaggle-allstate-predictor")
# Import Data
sampleSubmission <- read.csv("~/GitHub/kaggle-allstate-predictor/sampleSubmission.csv")
#test <- read.csv("~/GitHub/giantfiles/kaggle-allstate-predictor/test_v2.csv")
#test <- read.csv("~/GitHub/kaggle-allstate-predictor/test.csv")
train <- read.csv("~/GitHub/giantfiles/kaggle-allstate-predictor/train.csv")
train.quotes <- subset(train, train$record_type == 0)
train.selection <- subset(train, train$record_type == 1)
Aplot <- qplot(A,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
Bplot <- qplot(B,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
Cplot <- qplot(C,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
Dplot <- qplot(D,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
Eplot <- qplot(E,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
Fplot <- qplot(F,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
Gplot <- qplot(G,data=train.selection, binwidth = 1, geom="histogram", na.rm=T)
grid.arrange(Aplot, Bplot,Cplot,Dplot,Eplot,Fplot,Gplot,ncol=4)
#ggplot(train.selection, aes(x=A, na.rm=T)) + geom_histogram(binwidth=1)
nrows(train.selection)
nrow(train.selection)
length(subset(train.selection, A == 0))/rowcount
rowcount <- nrow(train.selection)
length(subset(train.selection, A == 0))/rowcount
nrow(subset(train.selection, A == 0))/rowcount
prob.overall$a0 <- nrow(subset(train.selection, A == 0)) / rowcount
prob.overall <- data.frame(matrix(ncol = 22, nrow = 1))
names(prob.overall)
names(prob.overall) <- c("a0","a1","a2","b0","b1","c1","c2","c3","c4","d1","d2","d3","e0","e1","f0","f1","f2","f3","g1","g2","g3","g4")
names(prob.overall)
prob.overall$a0 <- nrow(subset(train.selection, A == 0)) / rowcount
prob.overall$a1 <- nrow(subset(train.selection, A == 1)) / rowcount
prob.overall$a2 <- nrow(subset(train.selection, A == 2)) / rowcount
prob.overall
#Get Overall Probabilities by Option
prob.overall <- data.frame(matrix(ncol = 22, nrow = 1))
names(prob.overall) <- c("a0","a1","a2","b0","b1","c1","c2","c3","c4","d1","d2","d3","e0","e1","f0","f1","f2","f3","g1","g2","g3","g4")
rowcount <- nrow(train.selection)
# A
prob.overall$a0 <- nrow(subset(train.selection, A == 0)) / rowcount
prob.overall$a1 <- nrow(subset(train.selection, A == 1)) / rowcount
prob.overall$a2 <- nrow(subset(train.selection, A == 2)) / rowcount
# B
prob.overall$b0 <- nrow(subset(train.selection, B == 0)) / rowcount
prob.overall$b1 <- nrow(subset(train.selection, B == 1)) / rowcount
# C
prob.overall$c1 <- nrow(subset(train.selection, C == 1)) / rowcount
prob.overall$c2 <- nrow(subset(train.selection, C == 2)) / rowcount
prob.overall$c3 <- nrow(subset(train.selection, C == 3)) / rowcount
prob.overall$c4 <- nrow(subset(train.selection, C == 4)) / rowcount
# D
prob.overall$d1 <- nrow(subset(train.selection, D == 1)) / rowcount
prob.overall$d2 <- nrow(subset(train.selection, D == 2)) / rowcount
prob.overall$d3 <- nrow(subset(train.selection, D == 3)) / rowcount
# E
prob.overall$e0 <- nrow(subset(train.selection, E == 0)) / rowcount
prob.overall$e1 <- nrow(subset(train.selection, E == 1)) / rowcount
# F
prob.overall$f0 <- nrow(subset(train.selection, F == 0)) / rowcount
prob.overall$f1 <- nrow(subset(train.selection, F == 1)) / rowcount
prob.overall$f2 <- nrow(subset(train.selection, F == 2)) / rowcount
prob.overall$f3 <- nrow(subset(train.selection, F == 3)) / rowcount
# G
prob.overall$g1 <- nrow(subset(train.selection, G == 1)) / rowcount
prob.overall$g2 <- nrow(subset(train.selection, G == 2)) / rowcount
prob.overall$g3 <- nrow(subset(train.selection, G == 3)) / rowcount
prob.overall$g4 <- nrow(subset(train.selection, G == 4)) / rowcount
######################################################################
######################################################################
prob.overall
for(state in train.selection) {
print state
}
for(state in train.selection) {
print(state)
}
names(train.selection)
prob.byState <- data.frame(matrix(ncol = 23, nrow = 1))
names(prob.byState) <- c("state","a0","a1","a2","b0","b1","c1","c2","c3","c4","d1","d2","d3","e0","e1","f0","f1","f2","f3","g1","g2","g3","g4")
ddply(train.selection, state,
a0 = nrow(subset(train.selection, A == 0)) / length(A)
)
ddply(train.selection, state,
a0 = nrow(subset(train.selection, A == 0)) / length(train.selection$A)
)
ddply(train.selection, state,
a0 = nrow(subset(train.selection, A == 0)) / length(train.selection$A)
na.rm=T
)
ddply(train.selection, state,
a0 = nrow(subset(train.selection, A == 0)) / length(train.selection$A),
na.rm=T
)
ddply(train.selection, state,
a0 = median(A)
)
ddply(train.selection, state, summarise
a0 = median(A)
)
ddply(train.selection, state, summarise,
a0 = median(A)
)
ddply(train.selection, state, summarise,
a0 = median(train.selection$A)
)
ddply(train.selection, state, summarise,
a0 = mean(train.selection$A)
)
ddply(train.selection, state, summarise,
mean = mean(train.selection$A)
)
ddply(train.selection, "state", summarise,
mean = mean(train.selection$A)
)
ddply(train.selection, "state", summarise,
mean = mean(A)
)
ddply(train.selection, "state", summarise,
a0 = length(subset(A,A==0))
)
ddply(train.selection, "state", summarise,
a0 = length(subset(A,A==0)) / length(A)
)
ddply(train.selection, "state", summarise,
a0 = length(subset(A,A==0)) / length(A)
a1 = length(subset(A,A==1)) / length(A)
a2 = length(subset(A,A==2)) / length(A)
)
ddply(train.selection, "state", summarise,
a0 = length(subset(A,A==0)) / length(A),
a1 = length(subset(A,A==1)) / length(A),
a2 = length(subset(A,A==2)) / length(A)
)
prob.byState <- ddply(train.selection, "state", summarise,
a0 = length(subset(A,A==0)) / length(A),
a1 = length(subset(A,A==1)) / length(A),
a2 = length(subset(A,A==2)) / length(A),
b0 = length(subset(B,B==0)) / length(B),
b1 = length(subset(B,B==1)) / length(B),
c1 = length(subset(C,C==1)) / length(C),
c2 = length(subset(C,C==2)) / length(C),
c3 = length(subset(C,C==3)) / length(C),
c4 = length(subset(C,C==4)) / length(C),
d1 = length(subset(D,D==1)) / length(D),
d2 = length(subset(D,D==2)) / length(D),
d3 = length(subset(D,D==3)) / length(D),
e0 = length(subset(E,E==0)) / length(E),
e1 = length(subset(E,E==1)) / length(E),
f0 = length(subset(F,F==0)) / length(F),
f1 = length(subset(F,F==1)) / length(F),
f2 = length(subset(F,F==2)) / length(F),
f3 = length(subset(F,F==3)) / length(F),
g1 = length(subset(G,G==1)) / length(G),
g2 = length(subset(G,G==2)) / length(G),
g3 = length(subset(G,G==3)) / length(G),
g4 = length(subset(G,G==4)) / length(G)
)
prob.byState
